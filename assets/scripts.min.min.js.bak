const $ = (s, r=document) => r.querySelector(s);
const $$ = (s, r=document) => Array.from(r.querySelectorAll(s));
function setNavHeightVar(){
const h = $('.navbar')?.offsetHeight || 80;
document.documentElement.style.setProperty('--nav-h', h + 'px');
const observer = new IntersectionObserver((entries) => {
entries.forEach(entry => {
if (entry.isIntersecting) {
if (entry.target.id === 'about-text') entry.target.classList.remove('opacity-0', '-translate-x-20');
}
});
});
const aboutText = document.getElementById('about-text');
if (aboutText) observer.observe(aboutText);
const contactPixelPattern = document.getElementById('contact-pixel-pattern');
if (contactPixelPattern) {
for (let i = 0; i < 64; i++) {
const pixel = document.createElement('div');
const colors = ['bg-yellow-400', 'bg-pink-500', 'bg-cyan-400'];
pixel.className = colors[i % 3];
contactPixelPattern.appendChild(pixel);
}
}
}
window.addEventListener('resize', setNavHeightVar);
document.addEventListener('DOMContentLoaded', setNavHeightVar);
(function fixViewportHeight(){
let _vhPending = false;
let _lastVH = -1;
const compute = () => {
  _vhPending = false;
  const h = (window.visualViewport && window.visualViewport.height) ? window.visualViewport.height : window.innerHeight;
  const rounded = Math.round(h);
  if (rounded !== _lastVH) {
    _lastVH = rounded;
    document.documentElement.style.setProperty('--vh', rounded + 'px');
  }
};
const setVH = () => { if (_vhPending) return; _vhPending = true; requestAnimationFrame(compute); };
setVH();
if (window.visualViewport) {
  window.visualViewport.addEventListener('resize', setVH, {passive:true});
  window.visualViewport.addEventListener('scroll', setVH, {passive:true});
} else {
  window.addEventListener('resize', setVH);
  window.addEventListener('orientationchange', setVH);
}
})();
(function mobileMenu(){
const ham = $('#hamburger');
const menu = $('#mobile-menu');
if(!ham || !menu) return;
const open = () => { menu.classList.remove('hidden'); menu.classList.add('flex'); };
const close = () => { menu.classList.add('hidden'); menu.classList.remove('flex'); };
ham.addEventListener('click', open);
menu.addEventListener('click', (e)=>{ if(e.target.closest('[data-close]')) close(); });
document.addEventListener('keydown', (e)=>{ if(e.key === 'Escape') close(); });
window.closeMobileMenu = close;
})();
(function setupHeroVideo(){
const video = $('#heroVideo');
if(!video) return;
let sourcesAttached = false;
function attachSourcesOnce(){
if (sourcesAttached) return;
const webm = video.dataset.srcWebm, mp4 = video.dataset.srcMp4;
if (webm) { const s = document.createElement('source'); s.src = webm; s.type='video/webm'; video.appendChild(s); }
if (mp4) { const s2= document.createElement('source'); s2.src= mp4; s2.type='video/mp4'; video.appendChild(s2); }
sourcesAttached = true; video.load();
}
const io = new IntersectionObserver((entries)=>{
entries.forEach(e=>{
if (e.isIntersecting && e.intersectionRatio >= .4) {
attachSourcesOnce();
video.muted = true; video.setAttribute('playsinline','');
video.play().catch(()=>{});
} else { try{ video.pause(); }catch{} }
});
}, { threshold:[0,.4,.6,1]});
io.observe($('.hero-viewport'));
document.addEventListener('visibilitychange', ()=>{ if (document.hidden) try{video.pause()}catch{}; });
video.addEventListener('canplay', ()=>{ if(!document.hidden) video.play().catch(()=>{}); }, {once:true});
})();
(function syncHeroGap(){
const root = document.documentElement;
const cta = document.querySelector('.hero-ui .cta-stack');
const dots = document.querySelector('.hero-ui .carousel-indicators');
if(!cta || !dots) return;
let pending = false, last = -1;
function compute(){
  pending = false;
  const h = Math.ceil(cta.getBoundingClientRect().height + dots.getBoundingClientRect().height + 16);
  const val = Math.max(0, h);
  if (val !== last) {
    last = val;
    root.style.setProperty('--hero-ui-gap', val + 'px');
  }
}
function measure(){ if (pending) return; pending = true; requestAnimationFrame(compute); }
window.addEventListener('load', measure, {once:true});
window.addEventListener('resize', measure);
new ResizeObserver(measure).observe(cta);
new ResizeObserver(measure).observe(dots);
measure();
})();
(function scrollReveal(){
const els = Array.from(document.querySelectorAll('[data-reveal]'));
if (!els.length) return;
const byGroup = new Map();
els.forEach(el => {
const g = el.dataset.revealGroup || '_solo';
if (!byGroup.has(g)) byGroup.set(g, []);
byGroup.get(g).push(el);
});
for (const [g, arr] of byGroup) byGroup.set(g, arr.sort((a,b) =>
a.compareDocumentPosition(b) & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1
));
const io = new IntersectionObserver((entries) => {
entries.forEach(entry => {
const el = entry.target;
if (!entry.isIntersecting) return;
const base = Number(el.dataset.revealDelay || 0);
let extra = 0;
const g = el.dataset.revealGroup;
if (g && byGroup.has(g)) {
const index = byGroup.get(g).indexOf(el);
const step = Number(el.dataset.revealStagger || 80);
extra = Math.max(0, index) * step;
}
setTimeout(() => el.classList.add('is-visible'), base + extra);
io.unobserve(el);
});
}, { threshold: 0.2, rootMargin: '0px 0px -10% 0px' });
els.forEach(el => io.observe(el));
})();
(function gamesFlip(){
const cards = Array.from(document.querySelectorAll('.game-card'));
if (!cards.length) return;
const supportsHover = window.matchMedia('(hover:hover) and (pointer:fine)').matches;
let activeCard = null;
let isAnimating = false;
function setActiveCard(targetCard) {
if (isAnimating) return;
isAnimating = true;
if (activeCard === targetCard) {
activeCard.classList.remove('is-flipped');
activeCard = null;
} else {
if (activeCard) {
activeCard.classList.remove('is-flipped');
}
if (targetCard) {
targetCard.classList.add('is-flipped');
activeCard = targetCard;
} else {
activeCard = null;
}
}
setTimeout(() => {
isAnimating = false;
}, 750);
}
function resetAllCards() {
if (isAnimating) return;
isAnimating = true;
cards.forEach(card => card.classList.remove('is-flipped'));
activeCard = null;
setTimeout(() => {
isAnimating = false;
}, 750);
}
cards.forEach(card => {
if (supportsHover) {
card.addEventListener('mouseenter', () => {
setActiveCard(card);
});
card.addEventListener('click', (e) => {
const isBtn = e.target.closest('a,button');
if (isBtn) return;
e.preventDefault();
setActiveCard(card);
});
} else {
card.addEventListener('click', (e) => {
const isBtn = e.target.closest('a,button');
if (isBtn) return;
e.preventDefault();
setActiveCard(card);
});
}
});
if (supportsHover) {
const gamesSection = document.getElementById('games');
if (gamesSection) {
gamesSection.addEventListener('mouseleave', resetAllCards);
}
}
if (!supportsHover) {
document.addEventListener('click', (e) => {
const clickedCard = e.target.closest('.game-card');
if (!clickedCard) {
resetAllCards();
}
});
}
})();
(function enhancedAnimations(){
const observer = new IntersectionObserver((entries) => {
entries.forEach(entry => {
if (entry.isIntersecting) {
const el = entry.target;
if (el.classList.contains('slide-in-left')) {
el.style.animationPlayState = 'running';
}
if (el.classList.contains('fade-in-scale')) {
el.style.animationPlayState = 'running';
}
observer.unobserve(el);
}
});
}, {
threshold: 0.2,
rootMargin: '0px 0px -50px 0px'
});
document.querySelectorAll('.slide-in-left, .fade-in-scale').forEach(el => {
el.style.animationPlayState = 'paused';
observer.observe(el);
});
})();
(function newsletter(){
const form = document.querySelector('footer input[type="email"]');
const button = form?.nextElementSibling;
if (!form || !button) return;
button.addEventListener('click', (e) => {
e.preventDefault();
const email = form.value.trim();
if (!email || !email.includes('@')) {
button.textContent = '❌';
button.classList.add('bg-red-400');
setTimeout(() => {
button.textContent = 'OK';
button.classList.remove('bg-red-400');
}, 2000);
return;
}
button.textContent = '✓';
button.classList.remove('bg-green-400');
button.classList.add('bg-cyan-400');
form.value = '';
setTimeout(() => {
button.textContent = 'OK';
button.classList.remove('bg-cyan-400');
button.classList.add('bg-green-400');
}, 3000);
});
form.addEventListener('keypress', (e) => {
if (e.key === 'Enter') {
button.click();
}
});
})();
(function smoothNavigation(){
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
anchor.addEventListener('click', function (e) {
e.preventDefault();
const targetId = this.getAttribute('href').substring(1);
const targetElement = document.getElementById(targetId);
if (targetElement) {
const mobileMenu = document.getElementById('mobile-menu');
if (mobileMenu && !mobileMenu.classList.contains('hidden')) {
mobileMenu.classList.add('hidden');
mobileMenu.classList.remove('flex');
}
targetElement.scrollIntoView({
behavior: 'smooth',
block: 'start'
});
}
});
});
})();
const track = $('#carouselTrack');
const slides = $$('.carousel-item', track);
const dots = $$('#carouselIndicators .carousel-indicator');
let index = 0;
const AUTO_MS = 6000;
let auto = null;
function startAuto(){ stopAuto(); auto = setInterval(() => nextSlide(false), AUTO_MS); }
function stopAuto(){ if (auto !== null){ clearInterval(auto); auto = null; } }
function resetAuto(){ startAuto(); }
function updateCarousel(){
const offset = -index * 100;
track.style.transform = `translate3d(${offset}%, 0, 0)`;
dots.forEach((d,i)=> d.classList.toggle('active', i===index));
}
function goToSlide(i){ index = (i + slides.length) % slides.length; updateCarousel(); }
function nextSlide(userInitiated = true){ goToSlide(index + 1); if (userInitiated) resetAuto(); }
function prevSlide(userInitiated = true){ goToSlide(index - 1); if (userInitiated) resetAuto(); }
startAuto();
document.addEventListener('visibilitychange', ()=>{ if (document.hidden) stopAuto(); else startAuto(); });
$('.carousel-prev')?.addEventListener('click', () => resetAuto());
$('.carousel-next')?.addEventListener('click', () => resetAuto());
$('#carouselIndicators')?.addEventListener('click', (e) => {
if (e.target?.classList?.contains('carousel-indicator')) resetAuto();
});
window.goToSlide = goToSlide;
window.nextSlide = nextSlide;
window.prevSlide = prevSlide;
(function consoleArt(){
const art = `
╔══════════════════════════════════════════════════════════╗
║ ║
║ ██████╗ ██╗████████╗ ██╗███╗ ██╗██╗ ██╗███████╗ ║
║ ██╔══██╗██║╚══██╔══╝ ██║████╗ ██║██║ ██║██╔════╝ ║
║ ██████╔╝██║ ██║ ██║██╔██╗ ██║██║ ██║█████╗ ║
║ ██╔══██╗██║ ██║ ██║██║╚██╗██║╚██╗ ██╔╝██╔══╝ ║
║ ██████╔╝██║ ██║ ██║██║ ╚████║ ╚████╔╝ ███████╗ ║
║ ╚═════╝ ╚═╝ ╚═╝ ╚═╝╚═╝ ╚═══╝ ╚═══╝ ╚══════╝ ║
║ ║
║ 🎮 GAMING STUDIO | PIXEL ART | ANIME 🎨 ║
║ ║
║ Desenvolvedor curioso? 👀 ║
║ Mande um email: wesley@bitinverso.com ║
║ ║
╚══════════════════════════════════════════════════════════╝
`;
console.log(art);
console.log('%cBit Inverso - Gaming Studio', 'font-size: 24px; font-weight: bold; color: #06b6d4;');
console.log('%cCriando jogos indie com pixel art, anime e humor ácido!', 'font-size: 14px; color: #ec4899;');
console.log('%cSe você chegou até aqui, você definitivamente tem o perfil que procuramos! 🚀', 'font-size: 12px; color: #10b981;');
})();