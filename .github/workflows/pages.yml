name: Optimize & Deploy to Pages

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  encode-assets:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Instalar ffmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Permissões no script
        run: chmod +x tools/encode_videos.sh

      - name: Restore encoded videos cache
        id: restore-encodes
        uses: actions/cache/restore@v4
        with:
          path: |
            assets/hero-background-480.webm
            assets/hero-background-480.mp4
            assets/hero-background-720.webm
            assets/hero-background-720.mp4
            assets/hero-background-1080.webm
            assets/hero-background-1080.mp4
          key: ${{ runner.os }}-encodes-${{ hashFiles('assets/hero-background.mp4', 'tools/encode_videos.sh') }}
          restore-keys: |
            ${{ runner.os }}-encodes-

      - name: Re-encoder vídeos (MP4 + WEBM em 480/720/1080)
        if: steps.restore-encodes.outputs.cache-hit != 'true'
        run: tools/encode_videos.sh assets/hero-background.mp4

      - name: Save encoded videos cache
        if: steps.restore-encodes.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            assets/hero-background-480.webm
            assets/hero-background-480.mp4
            assets/hero-background-720.webm
            assets/hero-background-720.mp4
            assets/hero-background-1080.webm
            assets/hero-background-1080.mp4
          key: ${{ steps.restore-encodes.outputs.cache-primary-key }}

      - name: Validar saídas
        run: |
          test -f assets/hero-background-480.webm
          test -f assets/hero-background-480.mp4
          test -f assets/hero-background-720.webm
          test -f assets/hero-background-720.mp4
          test -f assets/hero-background-1080.webm
          test -f assets/hero-background-1080.mp4

      - name: Upload encoded assets
        uses: actions/upload-artifact@v4
        with:
          name: encoded-assets
          path: |
            assets/hero-background-*.webm
            assets/hero-background-*.mp4
          if-no-files-found: error

  build:
    needs: encode-assets
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download encoded assets
        uses: actions/download-artifact@v4
        with:
          name: encoded-assets
          path: assets

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # ---------- ROOT (Tailwind + PostCSS) ----------
      - name: Install deps (root)
        run: npm ci || true

      # Gera CSS do root com Tailwind CLI (ajuste -i/-o se seus paths forem outros)
      - name: Build CSS (root via Tailwind CLI)
        run: npx tailwindcss -c tailwind.config.js -i ./src/tailwind.css -o ./assets/tailwind.css --minify

      # Opcional: passa no PostCSS (autoprefixer/cssnano) mesmo sem postcss-cli no repo
      - name: PostCSS (autoprefixer/cssnano)
        run: npx --yes postcss-cli@latest ./assets/tailwind.css -o ./assets/tailwind.css

      # ---------- POC (Vite) ----------
      - name: Install deps (poc)
        run: npm ci || true
        working-directory: ./poc

      - name: Build (poc - Vite)
        run: NODE_ENV=production npm run build --if-present
        working-directory: ./poc

      # ---------- Monta artefato para Pages ----------
      - name: Montar diretório de publicação
        run: |
          rm -rf gh-pages
          mkdir -p gh-pages

          # copia o site raiz (HTML, assets, imagens, etc) – exclui coisas de dev
          rsync -av \
            --exclude '.git*' \
            --exclude 'node_modules' \
            --exclude '.github' \
            --exclude 'poc' \
            --exclude 'package*.json' \
            --exclude 'vite.config.js' \
            --exclude 'tailwind.config.js' \
            --exclude 'postcss.config.js' \
            --exclude 'README.md' \
            ./ gh-pages/

          # garante que os vídeos existam no artefato final
          mkdir -p gh-pages/assets
          cp -n assets/hero-background-* gh-pages/assets/ 2>/dev/null || true

          # subsite /poc (build do Vite)
          mkdir -p gh-pages/poc
          if [ -d poc/dist ]; then cp -r poc/dist/* gh-pages/poc/; fi

      - name: Upload artifact (site)
        uses: actions/upload-pages-artifact@v3
        with:
          path: gh-pages

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
